exec (acomp a) (0,s,[]) == (length (acomp a), s, [aval a s])

Proof:
--Task 4

Case a = N x:

--First, reduce the RHS (right hand side) to the simplest form. 
(length (acomp a), s, [aval a s])
[substituting 'a' in acomp a] = (length (acomp (N x)), s, [aval (N x) s])
[applying acomp] = (length [LOADI x]), s, [aval (N x) s])
[applying aval] = (1, s, [x]) --length of (acomp (N x)) is equal to 1, since, acomp (N x) s = [LOADI x]
= (1, s, [x])

--Next, prove the LHS == RHS.
exec (acomp a) (0,s,[])
exec (acomp (N x)) (0, s, []) = [substituting 'a' in acomp a]
exec ([LOADI x]) (0, s, []) = [applying acomp]
(exec [LOADI x] (0, s, []) = iexec LOADI x (0, s, [])) = [applying exec]
(1, s, x : st) = [applying iexec]
(1, s, [x]) = [adding x to the stack]

Therefore, LHS == RHS, (1, s, [x]) == (1, s, [x])


Case a = V v:

--First, reduce the RHS (right hand side) to the simplest form. 
(length (acomp a), s, [aval a s])
[substituting "a" in acomp a] = (length (acomp (V v)), s, [aval (V v) s])
[applying acomp] = (length ([LOAD v]), s, [aval (V v) s])
[applying aval] = (1, s, [s Map.! v])
= (1, s, [s Map.! v])

--Next, prove the LHS == RHS.
exec (acomp a) (0,s,[])
exec (acomp (V v)) (0,s,[]) = [substituting 'a' in acomp a]
exec ([LOAD v]) (0,s,[]) = [applying acomp]
(exec [LOAD v] (0, s, []) = iexec LOAD v (0, s, [])) = [applying exec]
(1, s, s Map.! v : st) = [applying iexec]
(1, s, [s Map.! v]) = [adding the value for v to the stack]

Therefore, LHS == RHS, (1, s, [s Map.! v]) == (1, s, [s Map.! v])


Case a = Plus a1 a2, where a1 = N x, a2 = V v:

--First, reduce the RHS (right hand side) to the simplest form. 
(length (acomp a), s, [aval a s])
[substituting "a" in acomp a] = (length (acomp (Plus a1 a2)), s, [aval (Plus a1 a2) s])
[applying acomp] = (length (acomp (N x) ++ acomp (V v) ++ [ADD]), s, [aval (N x) s + aval (V v) s])
[applying acomp for a1 and a2] = (length ([LOADI x] ++ [LOAD v] ++ [ADD]), s, [aval (N x) s + aval (V v) s])
[applying ++] = (length ([LOADI x] ++ [LOAD v] ++ [ADD]), s, [aval (N x) s + aval (V v) s])
[applying aval] = (length ([LOADI x, LOAD v, ADD]), s, [aval (N x) s + aval (V v) s])
[applying length] = (3, s, [x + s Map.! v])
= (3, s, [x + s Map.! v])

--Next, prove the LHS == RHS.
exec (acomp a) (0,s,[]) 
exec (acomp (Plus a1 a2)) (0,s,[]) = [substituting "a" in acomp a]
exec (acomp (N x) ++ acomp (V v) ++ [ADD]) (0,s,[]) = [applying acomp to a1 and a2]
exec ([LOADI x] ++ [LOAD v] ++ [ADD]) (0,s,[]) = [applying ++]
exec ([LOADI x, LOAD v, ADD]) (0,s,[]) = [applying exec]
exec Case ns:
    iexec LOADI x (0, s, []) = [applying iexec to LOADI x]
    iexec LOAD v (1, s, [x]) = [applying iexec to LOAD v]
    iexec ADD (2, s, [x, s Map.! v]) = [applying iexec to ADD]
(3, s, [x + s Map.! v])

Therefore, LHS == RHS, (3, s, [x + s Map.! v]) == (3, s, [x + s Map.! v])



Case a = Plus a1 a2, where a1 = N x, a2 = N x:

--First, reduce the RHS (right hand side) to the simplest form. 
(length (acomp a), s, [aval a s])
[substituting "a" in acomp a] = (length (acomp (Plus a1 a2)), s, [aval (Plus a1 a2) s])
[applying acomp] = (length (acomp (N x) ++ acomp (N x) ++ [ADD]), s, [aval (N x) s + aval (N x) s])
[applying acomp for a1 and a2] = (length ([LOADI x] ++ [LOADI x] ++ [ADD]), s, [aval (N x) s + aval (N x) s])
[applying ++] = (length ([LOADI x] ++ [LOADI x] ++ [ADD]), s, [aval (N x) s + aval (N x) s])
[applying aval] = (length ([LOADI x, LOADI x, ADD]), s, [aval (N x) s + aval (N x) s])
[applying length] = (3, s, [x + x])
= (3, s, [x + x])

--Next, prove the LHS == RHS.
exec (acomp a) (0,s,[]) 
exec (acomp (Plus a1 a2)) (0,s,[]) = [substituting "a" in acomp a]
exec (acomp (N x) ++ acomp (N x) ++ [ADD]) (0,s,[]) = [applying acomp to a1 and a2]
exec ([LOADI x] ++ [LOADI x] ++ [ADD]) (0,s,[]) = [applying ++]
exec ([LOADI x, LOADI x, ADD]) (0,s,[]) = [applying exec]
exec Case ns:
    iexec LOADI x (0, s, []) = [applying iexec to LOADI x]
    iexec LOADI x (1, s, [x]) = [applying iexec to LOADI x]
    iexec ADD (2, s, [x, x]) = [applying iexec to ADD]
(3, s, [x + x])

Therefore, LHS == RHS, (3, s, [x + x]) == (3, s, [x + x])


Case a = Plus a1 a2, where a1 = V v, a2 = V v:

--First, reduce the RHS (right hand side) to the simplest form. 
(length (acomp a), s, [aval a s])
[substituting "a" in acomp a] = (length (acomp (Plus a1 a2)), s, [aval (Plus a1 a2) s])
[applying acomp] = (length (acomp (V v) ++ acomp (V v) ++ [ADD]), s, [aval (V v) s + aval (V v) s])
[applying acomp for a1 and a2] = (length ([LOAD v] ++ [LOAD v] ++ [ADD]), s, [aval (N x) s + aval (V v) s])
[applying ++] = (length ([LOAD v] ++ [LOAD v] ++ [ADD]), s, [aval (V v) s + aval (V v) s])
[applying aval] = (length ([LOAD v, LOAD v, ADD]), s, [aval (V v) s + aval (V v) s])
[applying length] = (3, s, [s Map.! V + s Map.! v])
= (3, s, [s Map.! V + s Map.! v])

--Next, prove the LHS == RHS.
exec (acomp a) (0,s,[]) 
exec (acomp (Plus a1 a2)) (0,s,[]) = [substituting "a" in acomp a]
exec (acomp (V v) ++ acomp (V v) ++ [ADD]) (0,s,[]) = [applying acomp to a1 and a2]
exec ([LOAD v] ++ [LOAD v] ++ [ADD]) (0,s,[]) = [applying ++]
exec ([LOAD v, LOAD v, ADD]) (0,s,[]) = [applying exec]
exec Case ns:
    iexec LOAD v (0, s, []) = [applying iexec to LOAD v]
    iexec LOAD v (1, s, [s Map.! v]) = [applying iexec to LOAD v]
    iexec ADD (2, s, [s Map.! V, s Map.! v]) = [applying iexec to ADD]
(3, s, [s Map.! v + s Map.! v])

Therefore, LHS == RHS, (3, s, [s Map.! v + s Map.! v]) == (3, s, [s Map.! v + s Map.! v])